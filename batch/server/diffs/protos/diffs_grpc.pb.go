// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DiffsClient is the client API for Diffs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DiffsClient interface {
	Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error)
	Tidy(ctx context.Context, in *TidyRequest, opts ...grpc.CallOption) (*TidyResponse, error)
	TidyRemote(ctx context.Context, in *TidyRemoteRequest, opts ...grpc.CallOption) (*TidyRemoteResponse, error)
	Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error)
}

type diffsClient struct {
	cc grpc.ClientConnInterface
}

func NewDiffsClient(cc grpc.ClientConnInterface) DiffsClient {
	return &diffsClient{cc}
}

func (c *diffsClient) Export(ctx context.Context, in *ExportRequest, opts ...grpc.CallOption) (*ExportResponse, error) {
	out := new(ExportResponse)
	err := c.cc.Invoke(ctx, "/diffs.Diffs/Export", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffsClient) Tidy(ctx context.Context, in *TidyRequest, opts ...grpc.CallOption) (*TidyResponse, error) {
	out := new(TidyResponse)
	err := c.cc.Invoke(ctx, "/diffs.Diffs/Tidy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffsClient) TidyRemote(ctx context.Context, in *TidyRemoteRequest, opts ...grpc.CallOption) (*TidyRemoteResponse, error) {
	out := new(TidyRemoteResponse)
	err := c.cc.Invoke(ctx, "/diffs.Diffs/TidyRemote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *diffsClient) Aggregate(ctx context.Context, in *AggregateRequest, opts ...grpc.CallOption) (*AggregateResponse, error) {
	out := new(AggregateResponse)
	err := c.cc.Invoke(ctx, "/diffs.Diffs/Aggregate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DiffsServer is the server API for Diffs service.
// All implementations must embed UnimplementedDiffsServer
// for forward compatibility
type DiffsServer interface {
	Export(context.Context, *ExportRequest) (*ExportResponse, error)
	Tidy(context.Context, *TidyRequest) (*TidyResponse, error)
	TidyRemote(context.Context, *TidyRemoteRequest) (*TidyRemoteResponse, error)
	Aggregate(context.Context, *AggregateRequest) (*AggregateResponse, error)
	mustEmbedUnimplementedDiffsServer()
}

// UnimplementedDiffsServer must be embedded to have forward compatible implementations.
type UnimplementedDiffsServer struct {
}

func (UnimplementedDiffsServer) Export(context.Context, *ExportRequest) (*ExportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Export not implemented")
}
func (UnimplementedDiffsServer) Tidy(context.Context, *TidyRequest) (*TidyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tidy not implemented")
}
func (UnimplementedDiffsServer) TidyRemote(context.Context, *TidyRemoteRequest) (*TidyRemoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TidyRemote not implemented")
}
func (UnimplementedDiffsServer) Aggregate(context.Context, *AggregateRequest) (*AggregateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Aggregate not implemented")
}
func (UnimplementedDiffsServer) mustEmbedUnimplementedDiffsServer() {}

// UnsafeDiffsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DiffsServer will
// result in compilation errors.
type UnsafeDiffsServer interface {
	mustEmbedUnimplementedDiffsServer()
}

func RegisterDiffsServer(s grpc.ServiceRegistrar, srv DiffsServer) {
	s.RegisterService(&Diffs_ServiceDesc, srv)
}

func _Diffs_Export_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffsServer).Export(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffs.Diffs/Export",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffsServer).Export(ctx, req.(*ExportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diffs_Tidy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TidyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffsServer).Tidy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffs.Diffs/Tidy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffsServer).Tidy(ctx, req.(*TidyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diffs_TidyRemote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TidyRemoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffsServer).TidyRemote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffs.Diffs/TidyRemote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffsServer).TidyRemote(ctx, req.(*TidyRemoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Diffs_Aggregate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AggregateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DiffsServer).Aggregate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/diffs.Diffs/Aggregate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DiffsServer).Aggregate(ctx, req.(*AggregateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Diffs_ServiceDesc is the grpc.ServiceDesc for Diffs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Diffs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "diffs.Diffs",
	HandlerType: (*DiffsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Export",
			Handler:    _Diffs_Export_Handler,
		},
		{
			MethodName: "Tidy",
			Handler:    _Diffs_Tidy_Handler,
		},
		{
			MethodName: "TidyRemote",
			Handler:    _Diffs_TidyRemote_Handler,
		},
		{
			MethodName: "Aggregate",
			Handler:    _Diffs_Aggregate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/diffs.proto",
}
